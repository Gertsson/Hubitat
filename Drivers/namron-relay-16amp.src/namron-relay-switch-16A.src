/**
 *  NAMRON(SUNRICHER) Z-WAVE SWITCH 16A V1.0.1 (HUBITAT)
 *  (Models: SR-ZV9101SAC-HP-SWITCH-B)
 *
 *  Author: 
 *    Jonas Gertsson 
 * 	  Based on NEO Coolcam driver by Kevin LaFramboise (krlaframboise), this one worked reading values and 
 *    controlling switch but could not be used to configure parameters so that is the main changes done.
 *
 *  URL to original documentation: https://community.smartthings.com/t/release-neo-coolcam-power-plug/144274?u=krlaframboise
 *    
 *
 *  Changelog:
 *
 *    V1.0.0 (06/11/2022)
 *      - Initial Release
 *    V1.0.1 (04/25/2023)
 *      - Remove the combined High/low (Voltage, current,energy) history since didn't work well 
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (
		name: "Namron Z-Wave Switch 16A", 
		namespace: "Gertsson", 
		author: "Jonas Gertsson",
		vid:"generic-switch-power-energy",
		importUrl: "https://raw.githubusercontent.com/Gertsson/Hubitat/main/Drivers/namron-relay-16amp.src/namron-relay-switch-16A.src"
	) {
		capability "Actuator"
		capability "Sensor"
		capability "Switch"		
		capability "Outlet"
		capability "Power Meter"
		capability "Energy Meter"
		capability "Voltage Measurement"
		capability "Configuration"
		capability "Refresh"
		capability "Health Check"
				
		attribute "lastCheckin", "string"
		attribute "syncStatus", "string"
		attribute "current", "number"
		attribute "energyTime", "number"
		attribute "energyDuration", "string"
		
		["power", "voltage", "current"].each {
			attribute "${it}Low", "number"
			attribute "${it}High", "number"
		}
				
		command "reset"

		fingerprint mfr: "0438", prod: "0004", model: "D019", deviceJoinName: "NAMRON Z-WAVE SWITCH 16A"
	
	}

	simulator { }
	
	preferences {
		getParamInput(meterReportsEnabledParam)
		getParamInput(meterReportingIntervalParam)
		getParamInput(powerReportingThresholdParam)
   		getParamInput(currentReportingThresholdParam)
		getParamInput(voltageReportingThresholdParam)
		getParamInput(physicalButtonTypeParam)
		getParamInput(rememberSwitchStateParam)
		getParamInput(overloadProtectionParam)

		input "debugOutput", "bool", 
			title: "Enable Debug Logging", 
			defaultValue: true, 
			required: false
	}
}

private getParamInput(param) {
	input "${param.pref}", "enum",
		title: "${param.name}:",
		required: false,
		defaultValue: "${param.value}",
		options: param.options
}


// Meters
private getMeterEnergy() { 
	return [name: "energy", scale:0, unit:"kWh"] 
}

private getMeterPower() { 
	return [name: "power", scale:2, unit:"W"]
}

private getMeterVoltage() { 
    return [name: "voltage", scale:4, unit:"V"]
}

private getMeterCurrent() { 
    return [name: "current", scale:5, unit:"A"]
}


def installed() {
	logDebug "installed()..."
	state.refreshConfig = true
	
	return refresh()
}


def updated() {	
	if (!isDuplicateCommand(state.lastUpdated, 3000)) {
		state.lastUpdated = new Date().time
		
		logDebug "updated()..."
		
		executeConfigure()
	}
}


def configure() {
	logDebug "configure()..."

	state.refreshConfig = true
	
	runIn(2, executeConfigure)	
}

def executeConfigure() {
	def cmds = []
	
	if (!device.currentValue("switch")) {
		cmds += reset()
	}
	
	configParams.each { param ->
		def storedVal = getParamStoredValue(param.num)
		def paramVal = param.value
	
		if (state.refreshConfig || "${storedVal}" != "${paramVal}") {
			logDebug "Changing ${param.name}(#${param.num}) from ${storedVal} to ${paramVal}"
			cmds << configSetCmd(param, paramVal)
			cmds << configGetCmd(param)
		}
	}
	
	state.refreshConfig = false
	if (cmds) {
		sendCommands(cmds)
	}
}


private sendCommands(cmds) {
	if (cmds) {
		sendHubCommand(new hubitat.device.HubMultiAction(delayBetween(cmds, 500), hubitat.device.Protocol.ZWAVE))
	}
	return []
}


void updateHealthCheckInterval() {
	def minInterval = minReportingInterval
	
	if (state.minReportingInterval != minInterval) {
		state.minReportingInterval = minInterval
			
		// Set the Health Check interval so that it can be skipped twice plus 5 minutes.
		def checkInterval = ((minInterval * 3) + (5 * 60))
		
		def eventMap = getEventMap("checkInterval", checkInterval, false)
		eventMap.data = [protocol: "zwave", hubHardwareId: device.hub.hardwareID]
		
		sendEvent(eventMap)
	}
}

private getMinReportingInterval() {
	if (meterReportsEnabledParam.val) {
		return meterReportingIntervalParam.val
	}
	else {
		return (60 * 60 * 12)
	}
}


def ping() {
	logDebug "Pinging device because it has not checked in"
	return [switchBinaryGetCmd()]
}


def on() {
	logDebug "on()..."
	return delayBetween([
		basicSetCmd(0xFF),
		basicGetCmd()
	], 100)
}


def off() {
	logDebug "off()..."
	return delayBetween([
		basicSetCmd(0x00),
		basicGetCmd()
	], 100)
}


def refresh() {
	logDebug "refresh()..."
	
	refreshSyncStatus()
	
	return delayBetween([
		switchBinaryGetCmd(),
		meterGetCmd(meterEnergy),
		meterGetCmd(meterPower),
		meterGetCmd(meterVoltage),
		meterGetCmd(meterCurrent)
	], 500)
}


def reset() {
	logDebug "reset()..."
	["power", "voltage", "current"].each {
		sendEvent(getEventMap("${it}Low", getAttrVal(it), false))
		sendEvent(getEventMap("${it}High", getAttrVal(it), false))
	}
	sendEvent(getEventMap("energyTime", new Date().time, false))
	
	def result = []
	result << meterResetCmd()
	result << "delay 500"
	result += refresh()
	return result
}


private meterGetCmd(meter) {
	return secureCmd(zwave.meterV3.meterGet(scale: meter.scale))
}

private meterResetCmd() {
	return secureCmd(zwave.meterV3.meterReset())
}

private basicGetCmd() {
	return secureCmd(zwave.basicV1.basicGet())
}

private basicSetCmd(val) {
	return secureCmd(zwave.basicV1.basicSet(value: val))
}

private switchBinaryGetCmd() {
	return secureCmd(zwave.switchBinaryV1.switchBinaryGet())
}

private switchBinarySetCmd(val) {
	return secureCmd(zwave.switchBinaryV1.switchBinarySet(switchValue: val))
}

private configSetCmd(param, value) {
	return secureCmd(zwave.configurationV1.configurationSet(parameterNumber: param.num, size: param.size, scaledConfigurationValue: value))
}

private configGetCmd(param) {
	return secureCmd(zwave.configurationV1.configurationGet(parameterNumber: param.num))
}

private secureCmd(cmd) {
	if (getDataValue("zwaveSecurePairingComplete") == "true") {
		return zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
	}
	else {
		return cmd.format()
	}	
}

private getCommandClassVersions() {
	[
		0x20: 1,	// Basic
		0x25: 2,	// Switch Binary
		0x27: 1,	// All Switch
		0x32: 5,	// Meter v5
		0x55: 1,	// Transport Service
		0x59: 1,	// AssociationGrpInfo
		0x5A: 1,	// DeviceResetLocally
		0x5E: 2,	// ZwaveplusInfo
		0x6C: 1,	// Supervision
		0x70: 1,	// Configuration
		0x71: 8,    // Notification v8
		0x72: 2,	// ManufacturerSpecific
		0x73: 1,	// Powerlevel
		0x85: 2,	// Association
		0x86: 2,	// Version (2)
		0x8E: 2,	// Multi Channel Association
		0x98: 1,	// Security 0
		0x9F: 1		// Security S2
	]
}


def parse(String description) {	
	def result = []
	def cmd = zwave.parse(description, commandClassVersions)
	if (cmd) {
		result += zwaveEvent(cmd)		
	}
	else {
		log.warn "Unable to parse: $description"
	}
		
	if (!isDuplicateCommand(state.lastCheckinTime, 60000)) {
		state.lastCheckinTime = new Date().time
		sendEvent(getEventMap("lastCheckin", new Date(), false))
	}
	return result
}


def zwaveEvent(hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
	def encapsulatedCmd = cmd.encapsulatedCommand(commandClassVersions)	
	
	def result = []
	if (encapsulatedCmd) {
		result += zwaveEvent(encapsulatedCmd)
	}
	else {
		log.warn "Unable to extract encapsulated cmd from $cmd"
	}
	return result
}


def zwaveEvent(hubitat.zwave.commands.configurationv1.ConfigurationReport cmd) {	
	logTrace "ConfigurationReport ${cmd}"
	
	updateSyncingStatus()
	runIn(4, refreshSyncStatus, [overwrite: true])
	
	def param = configParams.find { it.num == cmd.parameterNumber }
	if (param) {	
		def val = cmd.scaledConfigurationValue
		
		logDebug "${param.name}(#${param.num}) = ${val}"
		setParamStoredValue(param.num, val)
		
		if (param == meterReportsEnabledParam || param == meterReportingIntervalParam) {
			updateHealthCheckInterval()
		}
	}
	else {
		logDebug "Parameter #${cmd.parameterNumber} = ${cmd.configurationValue}"
	}		
	return []
}


def zwaveEvent(hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) {
	logTrace "SwitchBinaryReport: ${cmd}"
	sendSwitchEvent(cmd.value, "physical")
	return []
}


def zwaveEvent(hubitat.zwave.commands.basicv1.BasicReport cmd) {
	logTrace "BasicReport: ${cmd}"
	sendSwitchEvent(cmd.value, "digital")
	return []
}

private sendSwitchEvent(value, type) {
	def eventVal = (value == 0xFF) ? "on" : "off"
	def map = getEventMap("switch", eventVal, null, "Switch is ${eventVal}")
	map.type = type
	sendEvent(map)
}


def zwaveEvent(hubitat.zwave.commands.meterv3.MeterReport cmd) {
	logTrace "MeterReport: $cmd"
	def val = Math.round(safeToDec(cmd.scaledMeterValue) * 100) / 100
	
	if (val >= 0) {
		def meter 
		switch (cmd.scale) {
			case meterEnergy.scale:			
				sendEvent(getEventMap("energyDuration", calculateEnergyDuration(), false))
				meter = meterEnergy
				break
			case meterPower.scale:
				meter = meterPower
                val = (int) Math.round(val)
				break
			case meterVoltage.scale:
				meter = meterVoltage
				break
			case meterCurrent.scale:
				meter = meterCurrent
				break
			default:
				logDebug "Unknown Meter Scale: $cmd"
		}

		if (meter?.name && getAttrVal("${meter.name}") != val) {
			sendEvent(getEventMap(meter.name, val, null, null, meter.unit))
			
			if (meter.name != meterEnergy.name) {
				sendHighLowEvents(meter, val)
			}
			
		}	
	}
	return []
}


private sendHighLowEvents(meter, val) {
	def highLowNames = [] 
	def highName = "${meter.name}High"
	def lowName = "${meter.name}Low"
	if (!getAttrVal(highName) || val > getAttrVal(highName)) {
		highLowNames << highName
	}
	if (!getAttrVal(lowName) || meter.value < getAttrVal(lowName)) {
		highLowNames << lowName
	}
	
	highLowNames.each {
		sendEvent(getEventMap("$it", val, false, null, meter.unit))
	}	
}


private calculateEnergyDuration() {
	def energyTimeMS = getAttrVal("energyTime")
	if (!energyTimeMS) {
		return "Unknown"
	}
	else {
		def duration = Math.round(safeToDec((new Date().time - energyTimeMS) / 60000) * 100) / 100

		if (duration >= (24 * 60)) {
			return getFormattedDuration(duration, (24 * 60), "Day")
		}
		else if (duration >= 60) {
			return getFormattedDuration(duration, 60, "Hour")
		}
		else {
			return getFormattedDuration(duration, 0, "Minute")
		}
	}
}

private getFormattedDuration(duration, divisor, name) {
	if (divisor) {
		duration = Math.round(safeToDec(duration / divisor) * 100) / 100
	}	
	return "${duration} ${name}${duration == 1 ? '' : 's'}"
}


def zwaveEvent(hubitat.zwave.Command cmd) {
	logDebug "Unhandled zwaveEvent: $cmd"
	return []
}


private updateSyncingStatus() {
	if (device.currentValue("syncStatus") != "Syncing...") {
		sendEvent(getEventMap("syncStatus", "Syncing...", false))
	}
}

def refreshSyncStatus() {
	def changes = pendingChanges	
	sendEvent(name: "syncStatus", value: (changes ?  "${changes} Pending Changes" : "Synced"), displayed: false)
}

private getPendingChanges() {	
	def total = 0
	configParams.each {
		def val = it.value
		total += ("${val}" == "${getParamStoredValue(it.num)}") ? 0 : 1
	}
	return total
}

private getParamStoredValue(paramNum) {
	return safeToInt(state["configVal${paramNum}"] , null)
}

private setParamStoredValue(paramNum, value) {
	state["configVal${paramNum}"] = value
}


// Configuration Parameters
private getConfigParams() {
	return [
		meterReportsEnabledParam,
		meterReportingIntervalParam,
		overloadProtectionParam,
		powerReportingThresholdParam,
		currentReportingThresholdParam,
        voltageReportingThresholdParam,
        rememberSwitchStateParam,
		physicalButtonTypeParam
	]
}

private getMeterReportsEnabledParam() {
	def num = 3
	return getParam(num, "Send Basic Report", 1, 1, enabledDisabledOptions, "reportEnabled")
}

private getMeterReportingIntervalParam() {
	def num = 13
	return getParam(num, "Meter Reporting Interval", 4, 1800, meterReportingIntervalOptions, "meterInterval")
}

private getOverloadProtectionParam() {
	def num = 4
	return getParam(num, "Current Overload Protection (16A)", 1, 1, overloadOptions, "overloadProtection")
}

private getPowerReportingThresholdParam() {	
	def num = 10
	return getParam(num, "Power Reporting Threshold", 1, 5, powerReportingThresholdOptions, "meterThreshold")
}

private getCurrentReportingThresholdParam() {	
	def num = 11
	return getParam(num, "Current Reporting Threshold", 1, 1, currentReportingThresholdOptions, "currentThreshold")
}

private getVoltageReportingThresholdParam() {	
	def num = 12
	return getParam(num, "Voltage Reporting Threshold", 1, 2, voltageReportingThresholdOptions, "voltageThreshold")
}

private getRememberSwitchStateParam() {
	def num = 2
	return getParam(num, "Remember Switch State After Power Failure", 1, 1, enabledDisabledOptions, "rememberState")
}

private getPhysicalButtonTypeParam() {
	def num = 5
	return getParam(num, "External switch type", 1, 0, externalSwitchOptions, "btnEnabled")
}


private getParam(num, name, size, defaultVal, options, pref) {
	def val = safeToInt((settings ? settings["${pref}"] : null), defaultVal) 
	
	def map = [num: num, name: name, size: size, value: val, pref:pref]
	map.valueName = options?.find { k, v -> "${k}" == "${val}" }?.value
	map.options = setDefaultOption(options, defaultVal)
		
	return map
}

private setDefaultOption(options, defaultVal) {
	return options?.collect { k, v ->
		if ("${k}" == "${defaultVal}") {
			v = "${v} [DEFAULT]"		
		}
		["$k": "$v"]
	}
}


// Setting Options
private getEnabledDisabledOptions() {
	 return [
		"0":"Disabled", 
		"1":"Enabled"
	]
}

private getExternalSwitchOptions() {
	 return [
		"0":"Push button", 
		"1":"Normal on/off"
	]
}

private getMeterReportingIntervalOptions() {
	def options = [:]
	
	options["60"] = "1 Minute"	
	options["90"] = "1 Minute 30 Seconds"	
	options["120"] = "2 Minutes"
	options["150"] = "2 Minutes 30 Seconds"	
	
	(3..10).each {
		options["${it * 60}"] = "${it} Minutes"
	}
	
	[15,20,25,30,45].each {
		options["${it * 60}"] = "${it} Minutes"
	}
	options["${60 * 60}"] = "1 Hour"
	(2..9).each {
		options["${it * 60 * 60}"] = "${it} Hours"
	}	
	
	return options
}

private getOverloadOptions() {
	 return [
		"0":"Disabled", 
		"1":"Enabled"
	]
}

private getPowerReportingThresholdOptions() {
	def options = ["0":"Disabled"]	
	[1,2,3,4,5,10,15,20,25,30,35,40,45,50,60,70,80,90,100].each {
		options["${it}"] = "${it}W"
	}	
	return options
}

private getCurrentReportingThresholdOptions() {
	def tempValue = 0
    def options = ["0":"Disabled"]	
	[1,2,3,4,5,6,7,8,9,10].each {
        tempValue = it / 10
		options["${it}"] = tempValue + "A"
	}	
	return options
}

private getVoltageReportingThresholdOptions() {
	def options = ["0":"Disabled"]	
	[1,2,3,4,5,6,7,8,9,10].each {
		options["${it}"] = "${it}V"
	}	
	return options
}

private hexBytesToInt(val, size) {
	if (size == 2) {
		return val[1] + (val[0] * 0x100)
	}
	else {
		return val[0]
	}
}

private intToHexBytes(val, size) {
	if (size == 2) {
		if (val > 32767) val = (val - 65536)
		return [(byte) ((val >> 8) & 0xff),(byte) (val & 0xff)]
	}
	else {
		if (val > 127) val = (val - 256)
		return [val]
	}
}


private getEventMap(name, value, displayed=null, desc=null, unit=null) {	
	desc = desc ?: "${name} is ${value}"
	
	def eventMap = [
		name: name,
		value: value,
		displayed: (displayed == null ? ("${getAttrVal(name)}" != "${value}") : displayed),
		isStateChange: true
	]
	
	if (unit) {
		eventMap.unit = unit
		desc = "${desc} ${unit}"
	}
	
	if (desc && eventMap.displayed) {
		logDebug desc
		eventMap.descriptionText = "${device.displayName} - ${desc}"
	}
	else {
		logTrace "Creating Event: ${eventMap}"
	}
	return eventMap
}

private getAttrVal(attrName) {
	try {
		return device?.currentValue("${attrName}")
	}
	catch (ex) {
		logTrace "$ex"
		return null
	}
}

private safeToInt(val, defaultVal=0) {
	return "${val}"?.isInteger() ? "${val}".toInteger() : defaultVal
}

private safeToDec(val, defaultVal=0) {
	return "${val}"?.isBigDecimal() ? "${val}".toBigDecimal() : defaultVal
}

private convertToLocalTimeString(dt) {
	def timeZoneId = location?.timeZone?.ID
	if (timeZoneId) {
		return dt.format("MM/dd/yyyy hh:mm:ss a", TimeZone.getTimeZone(timeZoneId))
	}
	else {
		return "$dt"
	}	
}

private isDuplicateCommand(lastExecuted, allowedMil) {
	!lastExecuted ? false : (lastExecuted + allowedMil > new Date().time) 
}

private logDebug(msg) {
	if (settings?.debugOutput || settings?.debugOutput == null) {
		log.debug "$msg"
	}
}

private logTrace(msg) {
	// log.trace "$msg"
}
